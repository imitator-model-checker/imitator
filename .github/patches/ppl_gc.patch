--- interfaces/OCaml/ppl_interface_generator_ocaml_cc_code.m4.orig
+++ interfaces/OCaml/ppl_interface_generator_ocaml_cc_code.m4
1108c1108,1110
<   delete p_@CLASS@_iterator_val(v);
---
> dnl NOTE: This is causing memory issues with the garbage collector in OCaml. We believe that the GC will clean these references anyway,
> dnl so commenting these lines will not create memory leaks.
> //  delete p_@CLASS@_iterator_val(v);

--- interfaces/OCaml/ppl_interface_generator_ocaml_hh_code.m4.orig
+++ interfaces/OCaml/ppl_interface_generator_ocaml_hh_code.m4
47,48c47,50
<    if (!marked(actual_p_@CLASS@_val(v)))
<       delete actual_p_@CLASS@_val(v);
---
> dnl NOTE: This is causing memory issues with the garbage collector in OCaml. We believe that the GC will clean these references anyway,
> dnl so commenting these lines will not create memory leaks.
> //   if (!marked(actual_p_@CLASS@_val(v)))
> //      delete actual_p_@CLASS@_val(v);

--- interfaces/OCaml/ppl_ocaml_common.cc.orig
+++ interfaces/OCaml/ppl_ocaml_common.cc
735c735,737
<   delete p_MIP_Problem_val(v);
---
> // NOTE: This is causing memory issues with the garbage collector in OCaml. We believe that the GC will clean these references anyway,
> // so commenting these lines will not create memory leaks.
> //  delete p_MIP_Problem_val(v);
764c766,768
<   delete p_PIP_Problem_val(v);
---
> // NOTE: This is causing memory issues with the garbage collector in OCaml. We believe that the GC will clean these references anyway,
> // so commenting these lines will not create memory leaks.
> //  delete p_PIP_Problem_val(v);
