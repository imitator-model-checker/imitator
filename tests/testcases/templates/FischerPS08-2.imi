(*******************************************************************************
 *                                IMITATOR MODEL                               
 * 
 * Title            : FischerPS08-2
 * Description      : 
 * Correctness      : 
 * Scalable         : yes
 * Generated        : yes
 * Categories       : Academic ; Protocol ; RTS
 * Source           : Wojciech Penczek, Maciej Szreter. SAT-based Unbounded Model Checking of Timed Automata. Fundam. Inform. 85(1-4): 425-440 (2008)
 * bibkey           : PS08
 * Author           : Wojciech Penczek and Maciej Szreter
 * Modeling         : Wojciech Penczek and Maciej Szreter
 * Input by         : Étienne André
 * License          : 
 * 
 * Created          : 
 * Last modified    : 2024/01/16
 * Model version    : 
 * 
 * IMITATOR version : 3.4
 ******************************************************************************)


(* Etienne: each automaton takes 4 actions and 1 clock. Problem: there is an additional variable automaton, the size of which depends on the number of processes. *)

var
	x1, x2
	: clock;

	nb
	: discrete;

	delta, Delta
	: parameter;

template process(x : clock, Start : action, SetX : action, Enter : action, SetX0 : action)

  actions: Start, SetX, Enter, SetX0;

  loc idle: invariant True
    when True sync Start do { x := 0 } goto trying;

  loc trying: invariant True
    when x < delta sync SetX do { x := 0 } goto waiting;

  loc waiting: invariant True
    when x > Delta sync Enter do { nb := nb + 1 } goto critical;

  loc critical: invariant True
    when True sync SetX0 do { nb := nb - 1 } goto idle;

end

automaton variable
	actions:
	Start1, SetX1, Enter1, SetX01, Start2, SetX2, Enter2, SetX02;

	loc Val0: invariant True
	when True sync Start1 do {} goto Val0;
	when True sync Start2 do {} goto Val0;
	when True sync SetX1 do {} goto Val1;
	when True sync SetX2 do {} goto Val2;

	loc Val1: invariant True
	when True sync Enter1 do {} goto Val1;
	when True sync SetX01 do {} goto Val0;
	when True sync SetX1 do {} goto Val1;
	when True sync SetX2 do {} goto Val2;

	loc Val2: invariant True
	when True sync Enter2 do {} goto Val2;
	when True sync SetX02 do {} goto Val0;
	when True sync SetX1 do {} goto Val1;
	when True sync SetX2 do {} goto Val2;
end

automaton observer

	loc obs_OK: invariant True
		(* Change '2' with any number of processes in CS *)
		when nb = 2 do {} goto obs_BAD;

	loc obs_BAD: invariant True
end (* observer *)

instantiate process1 := process(x1, Start1, SetX1, Enter1, SetX01);
instantiate process2 := process(x2, Start2, SetX2, Enter2, SetX02);

init := {
	discrete =
		loc[process1] := idle,
		loc[process2] := idle,
		loc[variable] := Val0,
		loc[observer] := obs_OK,

		nb := 0,
	;

	continuous =
		& x1 = 0
		& x2 = 0
		& Delta >= 0
		& delta >= 0
	;
}

end
