(*******************************************************************************
 *                                IMITATOR MODEL                               
 * 
 * Title            : CSMACD-bc4
 * Description      : Non-probabilistic model deduced from the probabilistic model in "Symbolic Model Checking for Probabilistic Timed Automata" (M. Kwiatkowska, G. Norman, J. Sproston and F. Wang., FORMATS/FTRTFT'2004). See figures on http://www.prismmodelchecker.org/casestudies/csma.php.
 * Correctness      : Transmission completed
 * Scalable         : yes
 * Generated        : yes
 * Categories       : Academic ; Industrial ; Protocol ; RTS
 * Source           : http://www.prismmodelchecker.org/casestudies/csma.php
 * bibkey           : KNSW07
 * Author           : M. Kwiatkowska, G. Norman, J. Sproston and F. Wang
 * Modeling         : M. Kwiatkowska, G. Norman, J. Sproston and F. Wang
 * Input by         : Étienne André
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 * 
 * Created          : 2007
 * Last modified    : 2024/09/17
 * Model version    : 
 * 
 * IMITATOR version : 3.4
 ******************************************************************************)




var
	(* Clocks *)
	x1,
	x2,
	y,
		: clock;

	(* Parameters *)
	lambda,    (* length of a message *)
	sigma,     (* propagation time of a message *)
	timeslot,
		: parameter;



(************************************************************)
automaton medium
(************************************************************)
actions: send1, send2, end1, end2, busy1, busy2, cd;

loc Init: invariant True
		when True sync send1 do {y <- 0} goto Transmit;
		when True sync send2 do {y <- 0} goto Transmit;

loc Transmit: invariant True
		when y <= sigma sync send1 do {y <- 0} goto Collide;
		when y <= sigma sync send2 do {y <- 0} goto Collide;

		when y >= sigma sync busy1 do {} goto Transmit;
		when y >= sigma sync busy2 do {} goto Transmit;

		when True sync end1 do {y <- 0} goto Init;
		when True sync end2 do {y <- 0} goto Init;

loc Collide: invariant y <= sigma
		when y <= sigma sync cd do {y <- 0} goto Init;

end (* medium *)



(************************************************************)
  automaton sender1
(************************************************************)
actions: send1, end1, busy1, cd, prob1;

loc Init1: invariant True
	when True sync send1 do {} goto Transmit1;

loc Transmit1: invariant x1 <= lambda
	when x1 = lambda sync end1 do {x1 <- 0} goto Done1;
	when True sync cd do {x1 <- 0} goto Collide1_1;

(* STARTING AUTOMATED PROGRAM FOR CSMA/CD FOR STATION 1 WITH BCMAX = 4 *)

(* Considering case with bc = 1, hence from 0 to 3 (i.e., 2^(bc+1) - 1) *)
loc Collide1_1: invariant x1 <= 0
	when True sync prob1 goto Wait1_1_0;
	when True sync prob1 goto Wait1_1_1;
	when True sync prob1 goto Wait1_1_2;
	when True sync prob1 goto Wait1_1_3;

loc Wait1_1_0: invariant x1 <= 0 timeslot
	when x1 = 0 timeslot sync busy1 do {x1 := 0} goto Collide1_2;
	when x1 = 0 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_1_1: invariant x1 <= 1 timeslot
	when x1 = 1 timeslot sync busy1 do {x1 := 0} goto Collide1_2;
	when x1 = 1 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_1_2: invariant x1 <= 2 timeslot
	when x1 = 2 timeslot sync busy1 do {x1 := 0} goto Collide1_2;
	when x1 = 2 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_1_3: invariant x1 <= 3 timeslot
	when x1 = 3 timeslot sync busy1 do {x1 := 0} goto Collide1_2;
	when x1 = 3 timeslot sync send1 do {x1 := 0} goto Transmit1;

(* Considering case with bc = 2, hence from 0 to 7 (i.e., 2^(bc+1) - 1) *)
loc Collide1_2: invariant x1 <= 0
	when True sync prob1 goto Wait1_2_0;
	when True sync prob1 goto Wait1_2_1;
	when True sync prob1 goto Wait1_2_2;
	when True sync prob1 goto Wait1_2_3;
	when True sync prob1 goto Wait1_2_4;
	when True sync prob1 goto Wait1_2_5;
	when True sync prob1 goto Wait1_2_6;
	when True sync prob1 goto Wait1_2_7;

loc Wait1_2_0: invariant x1 <= 0 timeslot
	when x1 = 0 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 0 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_1: invariant x1 <= 1 timeslot
	when x1 = 1 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 1 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_2: invariant x1 <= 2 timeslot
	when x1 = 2 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 2 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_3: invariant x1 <= 3 timeslot
	when x1 = 3 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 3 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_4: invariant x1 <= 4 timeslot
	when x1 = 4 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 4 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_5: invariant x1 <= 5 timeslot
	when x1 = 5 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 5 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_6: invariant x1 <= 6 timeslot
	when x1 = 6 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 6 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_2_7: invariant x1 <= 7 timeslot
	when x1 = 7 timeslot sync busy1 do {x1 := 0} goto Collide1_3;
	when x1 = 7 timeslot sync send1 do {x1 := 0} goto Transmit1;

(* Considering case with bc = 3, hence from 0 to 15 (i.e., 2^(bc+1) - 1) *)
loc Collide1_3: invariant x1 <= 0
	when True sync prob1 goto Wait1_3_0;
	when True sync prob1 goto Wait1_3_1;
	when True sync prob1 goto Wait1_3_2;
	when True sync prob1 goto Wait1_3_3;
	when True sync prob1 goto Wait1_3_4;
	when True sync prob1 goto Wait1_3_5;
	when True sync prob1 goto Wait1_3_6;
	when True sync prob1 goto Wait1_3_7;
	when True sync prob1 goto Wait1_3_8;
	when True sync prob1 goto Wait1_3_9;
	when True sync prob1 goto Wait1_3_10;
	when True sync prob1 goto Wait1_3_11;
	when True sync prob1 goto Wait1_3_12;
	when True sync prob1 goto Wait1_3_13;
	when True sync prob1 goto Wait1_3_14;
	when True sync prob1 goto Wait1_3_15;

loc Wait1_3_0: invariant x1 <= 0 timeslot
	when x1 = 0 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 0 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_1: invariant x1 <= 1 timeslot
	when x1 = 1 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 1 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_2: invariant x1 <= 2 timeslot
	when x1 = 2 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 2 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_3: invariant x1 <= 3 timeslot
	when x1 = 3 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 3 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_4: invariant x1 <= 4 timeslot
	when x1 = 4 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 4 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_5: invariant x1 <= 5 timeslot
	when x1 = 5 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 5 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_6: invariant x1 <= 6 timeslot
	when x1 = 6 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 6 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_7: invariant x1 <= 7 timeslot
	when x1 = 7 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 7 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_8: invariant x1 <= 8 timeslot
	when x1 = 8 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 8 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_9: invariant x1 <= 9 timeslot
	when x1 = 9 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 9 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_10: invariant x1 <= 10 timeslot
	when x1 = 10 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 10 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_11: invariant x1 <= 11 timeslot
	when x1 = 11 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 11 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_12: invariant x1 <= 12 timeslot
	when x1 = 12 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 12 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_13: invariant x1 <= 13 timeslot
	when x1 = 13 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 13 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_14: invariant x1 <= 14 timeslot
	when x1 = 14 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 14 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_3_15: invariant x1 <= 15 timeslot
	when x1 = 15 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 15 timeslot sync send1 do {x1 := 0} goto Transmit1;

(* Considering case with bc = 4, hence from 0 to 31 (i.e., 2^(bc+1) - 1) *)
loc Collide1_4: invariant x1 <= 0
	when True sync prob1 goto Wait1_4_0;
	when True sync prob1 goto Wait1_4_1;
	when True sync prob1 goto Wait1_4_2;
	when True sync prob1 goto Wait1_4_3;
	when True sync prob1 goto Wait1_4_4;
	when True sync prob1 goto Wait1_4_5;
	when True sync prob1 goto Wait1_4_6;
	when True sync prob1 goto Wait1_4_7;
	when True sync prob1 goto Wait1_4_8;
	when True sync prob1 goto Wait1_4_9;
	when True sync prob1 goto Wait1_4_10;
	when True sync prob1 goto Wait1_4_11;
	when True sync prob1 goto Wait1_4_12;
	when True sync prob1 goto Wait1_4_13;
	when True sync prob1 goto Wait1_4_14;
	when True sync prob1 goto Wait1_4_15;
	when True sync prob1 goto Wait1_4_16;
	when True sync prob1 goto Wait1_4_17;
	when True sync prob1 goto Wait1_4_18;
	when True sync prob1 goto Wait1_4_19;
	when True sync prob1 goto Wait1_4_20;
	when True sync prob1 goto Wait1_4_21;
	when True sync prob1 goto Wait1_4_22;
	when True sync prob1 goto Wait1_4_23;
	when True sync prob1 goto Wait1_4_24;
	when True sync prob1 goto Wait1_4_25;
	when True sync prob1 goto Wait1_4_26;
	when True sync prob1 goto Wait1_4_27;
	when True sync prob1 goto Wait1_4_28;
	when True sync prob1 goto Wait1_4_29;
	when True sync prob1 goto Wait1_4_30;
	when True sync prob1 goto Wait1_4_31;

loc Wait1_4_0: invariant x1 <= 0 timeslot
	when x1 = 0 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 0 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_1: invariant x1 <= 1 timeslot
	when x1 = 1 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 1 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_2: invariant x1 <= 2 timeslot
	when x1 = 2 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 2 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_3: invariant x1 <= 3 timeslot
	when x1 = 3 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 3 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_4: invariant x1 <= 4 timeslot
	when x1 = 4 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 4 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_5: invariant x1 <= 5 timeslot
	when x1 = 5 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 5 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_6: invariant x1 <= 6 timeslot
	when x1 = 6 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 6 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_7: invariant x1 <= 7 timeslot
	when x1 = 7 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 7 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_8: invariant x1 <= 8 timeslot
	when x1 = 8 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 8 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_9: invariant x1 <= 9 timeslot
	when x1 = 9 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 9 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_10: invariant x1 <= 10 timeslot
	when x1 = 10 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 10 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_11: invariant x1 <= 11 timeslot
	when x1 = 11 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 11 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_12: invariant x1 <= 12 timeslot
	when x1 = 12 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 12 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_13: invariant x1 <= 13 timeslot
	when x1 = 13 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 13 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_14: invariant x1 <= 14 timeslot
	when x1 = 14 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 14 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_15: invariant x1 <= 15 timeslot
	when x1 = 15 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 15 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_16: invariant x1 <= 16 timeslot
	when x1 = 16 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 16 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_17: invariant x1 <= 17 timeslot
	when x1 = 17 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 17 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_18: invariant x1 <= 18 timeslot
	when x1 = 18 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 18 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_19: invariant x1 <= 19 timeslot
	when x1 = 19 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 19 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_20: invariant x1 <= 20 timeslot
	when x1 = 20 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 20 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_21: invariant x1 <= 21 timeslot
	when x1 = 21 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 21 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_22: invariant x1 <= 22 timeslot
	when x1 = 22 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 22 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_23: invariant x1 <= 23 timeslot
	when x1 = 23 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 23 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_24: invariant x1 <= 24 timeslot
	when x1 = 24 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 24 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_25: invariant x1 <= 25 timeslot
	when x1 = 25 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 25 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_26: invariant x1 <= 26 timeslot
	when x1 = 26 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 26 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_27: invariant x1 <= 27 timeslot
	when x1 = 27 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 27 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_28: invariant x1 <= 28 timeslot
	when x1 = 28 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 28 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_29: invariant x1 <= 29 timeslot
	when x1 = 29 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 29 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_30: invariant x1 <= 30 timeslot
	when x1 = 30 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 30 timeslot sync send1 do {x1 := 0} goto Transmit1;

loc Wait1_4_31: invariant x1 <= 31 timeslot
	when x1 = 31 timeslot sync busy1 do {x1 := 0} goto Collide1_4;
	when x1 = 31 timeslot sync send1 do {x1 := 0} goto Transmit1;

(* END OF AUTOMATED PROGRAM FOR CSMA/CD *)



loc Done1: invariant x1 <= 0
 (* when True goto Done1; *)

end (* sender1 *)




(************************************************************)
  automaton sender2
(************************************************************)
actions: send2, end2, busy2, cd, prob2;

loc Init2: invariant x2 = 0
	when x2 = 0 sync send2 do {} goto Transmit2;

loc Transmit2: invariant x2 <= lambda
	when x2 = lambda sync end2 do {x2 <- 0} goto Done2;
	when True sync cd do {x2 <- 0} goto Collide2_1;



(* STARTING AUTOMATED PROGRAM FOR CSMA/CD FOR STATION 2 WITH BCMAX = 4 *)

(* Considering case with bc = 1, hence from 0 to 3 (i.e., 2^(bc+1) - 1) *)
loc Collide2_1: invariant x2 <= 0
	when True sync prob2 goto Wait2_1_0;
	when True sync prob2 goto Wait2_1_1;
	when True sync prob2 goto Wait2_1_2;
	when True sync prob2 goto Wait2_1_3;

loc Wait2_1_0: invariant x2 <= 0 timeslot
	when x2 = 0 timeslot sync busy2 do {x2 := 0} goto Collide2_2;
	when x2 = 0 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_1_1: invariant x2 <= 1 timeslot
	when x2 = 1 timeslot sync busy2 do {x2 := 0} goto Collide2_2;
	when x2 = 1 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_1_2: invariant x2 <= 2 timeslot
	when x2 = 2 timeslot sync busy2 do {x2 := 0} goto Collide2_2;
	when x2 = 2 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_1_3: invariant x2 <= 3 timeslot
	when x2 = 3 timeslot sync busy2 do {x2 := 0} goto Collide2_2;
	when x2 = 3 timeslot sync send2 do {x2 := 0} goto Transmit2;

(* Considering case with bc = 2, hence from 0 to 7 (i.e., 2^(bc+1) - 1) *)
loc Collide2_2: invariant x2 <= 0
	when True sync prob2 goto Wait2_2_0;
	when True sync prob2 goto Wait2_2_1;
	when True sync prob2 goto Wait2_2_2;
	when True sync prob2 goto Wait2_2_3;
	when True sync prob2 goto Wait2_2_4;
	when True sync prob2 goto Wait2_2_5;
	when True sync prob2 goto Wait2_2_6;
	when True sync prob2 goto Wait2_2_7;

loc Wait2_2_0: invariant x2 <= 0 timeslot
	when x2 = 0 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 0 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_1: invariant x2 <= 1 timeslot
	when x2 = 1 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 1 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_2: invariant x2 <= 2 timeslot
	when x2 = 2 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 2 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_3: invariant x2 <= 3 timeslot
	when x2 = 3 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 3 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_4: invariant x2 <= 4 timeslot
	when x2 = 4 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 4 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_5: invariant x2 <= 5 timeslot
	when x2 = 5 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 5 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_6: invariant x2 <= 6 timeslot
	when x2 = 6 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 6 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_2_7: invariant x2 <= 7 timeslot
	when x2 = 7 timeslot sync busy2 do {x2 := 0} goto Collide2_3;
	when x2 = 7 timeslot sync send2 do {x2 := 0} goto Transmit2;

(* Considering case with bc = 3, hence from 0 to 15 (i.e., 2^(bc+1) - 1) *)
loc Collide2_3: invariant x2 <= 0
	when True sync prob2 goto Wait2_3_0;
	when True sync prob2 goto Wait2_3_1;
	when True sync prob2 goto Wait2_3_2;
	when True sync prob2 goto Wait2_3_3;
	when True sync prob2 goto Wait2_3_4;
	when True sync prob2 goto Wait2_3_5;
	when True sync prob2 goto Wait2_3_6;
	when True sync prob2 goto Wait2_3_7;
	when True sync prob2 goto Wait2_3_8;
	when True sync prob2 goto Wait2_3_9;
	when True sync prob2 goto Wait2_3_10;
	when True sync prob2 goto Wait2_3_11;
	when True sync prob2 goto Wait2_3_12;
	when True sync prob2 goto Wait2_3_13;
	when True sync prob2 goto Wait2_3_14;
	when True sync prob2 goto Wait2_3_15;

loc Wait2_3_0: invariant x2 <= 0 timeslot
	when x2 = 0 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 0 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_1: invariant x2 <= 1 timeslot
	when x2 = 1 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 1 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_2: invariant x2 <= 2 timeslot
	when x2 = 2 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 2 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_3: invariant x2 <= 3 timeslot
	when x2 = 3 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 3 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_4: invariant x2 <= 4 timeslot
	when x2 = 4 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 4 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_5: invariant x2 <= 5 timeslot
	when x2 = 5 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 5 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_6: invariant x2 <= 6 timeslot
	when x2 = 6 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 6 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_7: invariant x2 <= 7 timeslot
	when x2 = 7 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 7 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_8: invariant x2 <= 8 timeslot
	when x2 = 8 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 8 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_9: invariant x2 <= 9 timeslot
	when x2 = 9 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 9 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_10: invariant x2 <= 10 timeslot
	when x2 = 10 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 10 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_11: invariant x2 <= 11 timeslot
	when x2 = 11 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 11 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_12: invariant x2 <= 12 timeslot
	when x2 = 12 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 12 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_13: invariant x2 <= 13 timeslot
	when x2 = 13 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 13 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_14: invariant x2 <= 14 timeslot
	when x2 = 14 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 14 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_3_15: invariant x2 <= 15 timeslot
	when x2 = 15 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 15 timeslot sync send2 do {x2 := 0} goto Transmit2;

(* Considering case with bc = 4, hence from 0 to 31 (i.e., 2^(bc+1) - 1) *)
loc Collide2_4: invariant x2 <= 0
	when True sync prob2 goto Wait2_4_0;
	when True sync prob2 goto Wait2_4_1;
	when True sync prob2 goto Wait2_4_2;
	when True sync prob2 goto Wait2_4_3;
	when True sync prob2 goto Wait2_4_4;
	when True sync prob2 goto Wait2_4_5;
	when True sync prob2 goto Wait2_4_6;
	when True sync prob2 goto Wait2_4_7;
	when True sync prob2 goto Wait2_4_8;
	when True sync prob2 goto Wait2_4_9;
	when True sync prob2 goto Wait2_4_10;
	when True sync prob2 goto Wait2_4_11;
	when True sync prob2 goto Wait2_4_12;
	when True sync prob2 goto Wait2_4_13;
	when True sync prob2 goto Wait2_4_14;
	when True sync prob2 goto Wait2_4_15;
	when True sync prob2 goto Wait2_4_16;
	when True sync prob2 goto Wait2_4_17;
	when True sync prob2 goto Wait2_4_18;
	when True sync prob2 goto Wait2_4_19;
	when True sync prob2 goto Wait2_4_20;
	when True sync prob2 goto Wait2_4_21;
	when True sync prob2 goto Wait2_4_22;
	when True sync prob2 goto Wait2_4_23;
	when True sync prob2 goto Wait2_4_24;
	when True sync prob2 goto Wait2_4_25;
	when True sync prob2 goto Wait2_4_26;
	when True sync prob2 goto Wait2_4_27;
	when True sync prob2 goto Wait2_4_28;
	when True sync prob2 goto Wait2_4_29;
	when True sync prob2 goto Wait2_4_30;
	when True sync prob2 goto Wait2_4_31;

loc Wait2_4_0: invariant x2 <= 0 timeslot
	when x2 = 0 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 0 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_1: invariant x2 <= 1 timeslot
	when x2 = 1 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 1 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_2: invariant x2 <= 2 timeslot
	when x2 = 2 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 2 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_3: invariant x2 <= 3 timeslot
	when x2 = 3 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 3 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_4: invariant x2 <= 4 timeslot
	when x2 = 4 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 4 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_5: invariant x2 <= 5 timeslot
	when x2 = 5 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 5 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_6: invariant x2 <= 6 timeslot
	when x2 = 6 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 6 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_7: invariant x2 <= 7 timeslot
	when x2 = 7 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 7 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_8: invariant x2 <= 8 timeslot
	when x2 = 8 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 8 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_9: invariant x2 <= 9 timeslot
	when x2 = 9 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 9 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_10: invariant x2 <= 10 timeslot
	when x2 = 10 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 10 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_11: invariant x2 <= 11 timeslot
	when x2 = 11 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 11 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_12: invariant x2 <= 12 timeslot
	when x2 = 12 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 12 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_13: invariant x2 <= 13 timeslot
	when x2 = 13 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 13 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_14: invariant x2 <= 14 timeslot
	when x2 = 14 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 14 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_15: invariant x2 <= 15 timeslot
	when x2 = 15 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 15 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_16: invariant x2 <= 16 timeslot
	when x2 = 16 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 16 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_17: invariant x2 <= 17 timeslot
	when x2 = 17 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 17 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_18: invariant x2 <= 18 timeslot
	when x2 = 18 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 18 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_19: invariant x2 <= 19 timeslot
	when x2 = 19 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 19 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_20: invariant x2 <= 20 timeslot
	when x2 = 20 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 20 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_21: invariant x2 <= 21 timeslot
	when x2 = 21 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 21 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_22: invariant x2 <= 22 timeslot
	when x2 = 22 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 22 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_23: invariant x2 <= 23 timeslot
	when x2 = 23 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 23 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_24: invariant x2 <= 24 timeslot
	when x2 = 24 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 24 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_25: invariant x2 <= 25 timeslot
	when x2 = 25 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 25 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_26: invariant x2 <= 26 timeslot
	when x2 = 26 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 26 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_27: invariant x2 <= 27 timeslot
	when x2 = 27 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 27 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_28: invariant x2 <= 28 timeslot
	when x2 = 28 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 28 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_29: invariant x2 <= 29 timeslot
	when x2 = 29 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 29 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_30: invariant x2 <= 30 timeslot
	when x2 = 30 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 30 timeslot sync send2 do {x2 := 0} goto Transmit2;

loc Wait2_4_31: invariant x2 <= 31 timeslot
	when x2 = 31 timeslot sync busy2 do {x2 := 0} goto Collide2_4;
	when x2 = 31 timeslot sync send2 do {x2 := 0} goto Transmit2;

(* END OF AUTOMATED PROGRAM FOR CSMA/CD *)





loc Done2: invariant x2 <= 0
	(* when True goto Done2; *)

end (* sender2 *)




(************************************************************)
(* Initial state *)
(************************************************************)

init <- {
	discrete =
		(* Initial location *)
		loc[medium]  <- Init,
		loc[sender1] <- Init1,
		loc[sender2] <- Init2,
	;

	continuous =
		(* Initial clock constraints *)
		& x1 = 0
		& x2 = 0
		& y  = 0

		(* Parameter constraints *)
		& lambda >=0
		& sigma >= 0
		& timeslot >= 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
